decl puts(s:String):Int
decl printInt(i:Int):Void
decl printFloat(f:Float):Void
decl printBool(b:Bool):Void
decl printString(s:String):Void
decl new_int_array(size:Int):[Int]
decl new_int_matrix(size:Int, size2:Int):[[Int]]
decl new_float_array(size:Int):[Float]
decl new_bool_array(size:Int):[Bool]
decl new_string_array(size:Int):[String]

def main():Int {
	n:Int = 7; 
	arr:[Int] = new_int_array(n);
	arr[0] = 64;
	arr[1] = 34;
	arr[2] = -25;
	arr[3] = 12;
	arr[4] = 22;
	arr[5] = 11;
	arr[6] = 90;
	printString("--Before sorting--");
	printInt(arr[0]);
	printInt(arr[1]);
	printInt(arr[2]);
	printInt(arr[3]);
	printInt(arr[4]);
	printInt(arr[5]);
	printInt(arr[6]);
	quickSort(arr, 0, n-1);  
	printString("--After sorting--");
	printInt(arr[0]);
	printInt(arr[1]);
	printInt(arr[2]);
	printInt(arr[3]);
	printInt(arr[4]);
	printInt(arr[5]);
	printInt(arr[6]);
	return 0;
}


def quickSort(arr:[Int], low:Int, high:Int):Void	{
	if (low < high) {
		fp:Int = partition(arr, low, high);

		quickSort(arr, low, fp - 1);
		quickSort(arr, fp + 1, high);
	}
}

def partition(arr:[Int], low:Int, high:Int):Int {
	# pivot (Element to be placed at right position)
	pivot:Int = arr[high];  

	i:Int = (low - 1);  # Index of smaller element
		
	j:Int = low;
	while (j <= (high - 1)) {		
		if (arr[j] < pivot) {
			i = i + 1;    
			temp:Int = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
		}
		j=j+1;
	}
	temp:Int = arr[i + 1];
	arr[i + 1] = arr[high];
	arr[high] = temp;
	return (i + 1);
}
