decl puts(s:String):Int
decl new_int_array(size:Int):[Int]
decl new_float_array(size:Int):[Float]
decl new_bool_array(size:Int):[Bool]
decl new_string_array(size:Int):[String]

def arrayIntTest():Int { 
	arr1:[Int] = new_int_array(3);
	arr2:[Float] = new_float_array(3);
	arr3:[Bool] = new_bool_array(3);
	arr4:[String] = new_string_array(3);
	return 1;
}


def testWhile():Int {  
	a:Int = 3;
	str1:String = "estamos no ciclo";
	str2:String = "o a e 2";
	while(a > 0) {
		puts(str1);
		a = a - 1;
		if(a == 2) {
			puts(str2);
		}
	}
	a = 3;
	b:Int = 3;
	while(a > 0) {
		while(b > 0) {
			puts(str1);
			b = b - 1;
			if(b == 2) {
				puts(str2);
			}
		}
		a = a - 1;
		
	}
	puts("fiM");
	return 2;
}

def onlyIF(a:Bool, b:Bool):Int {  
	str1:String = "foi no then";
	str2:String = "foi para o else";
	if(a != b) {
		puts(str1);
		if(a != b) {
		puts(str1);
	}
	if(a != b) {
		puts(str1);
	}
	}
	return 2;
}

def testIF(a:Bool, b:Bool):Int {  
	str1:String = "foi no then";
	str2:String = "foi para o else";
	if(a != b) {
		puts(str1);
	} else {
		ola:Int = puts(str2);
		puts(str2);
	}
	return 2;
}

def testIF2(a:Bool, b:Bool):Int {  
	if(a == b) {
		if(a != b) {
			var1:Int = 3;
		} else {
			var2:Int = 5;
		}
	} else {
		var2:Int = 5;
	}
	return 2;
}

def main(ar:[String]):Int {  
	testWhile();
    testIF(true, true);
    onlyIF(false, true);
	a1:Int = 8;
	a1 = 99 + 2;
	a2:Int = 4;
	a3:Int = a1 + a2 + 4 + 4 -2 + a1 +a1 +a1 * 3 /3;
	a4:Int = a1 + 2;
	b:Float = 3.2;
	b = 7.9 - 4.2;
	c:Bool = 5 < 5;
	c = true;
	c1:Bool = a1 < 5;	
	c2:Bool = 5 < a2;	
	c3:Bool = a1 < a2;	
	c4:Bool = b < 2.0;
	
	c1 = a1 <= 5;	
	c2 = 5 <= a2;	
	c3 = a1 <= a2;	
	c4 = b <= 2.0;
	
	c1 = a1 > 5;	
	c2 = 5 > a2;	
	c3 = a1 > a2;	
	c4 = b > 2.0;
	
	c1 = a1 >= 5;	
	c2 = 5 >= a2;	
	c3 = a1 >= a2;	
	c4 = b >= 2.0;
	
	c1 = a1 == 5;	
	c2 = 5 == a2;	
	c3 = a1 == a2;	
	c4 = b == 2.0;
	
	c1 = a1 != 5;	
	c2 = 5 != a2;	
	c3 = a1 != a2;	
	c4 = b != 2.0;
	
	c1 = c1 || true;	
	c2 = false && false;	
	c3 = c2 || c2 && c2;	
	c4 = false || true && c2;
	
	c1 = !(c1 || true);	
	c2 = !false ;	
	c3 = !c2;	
	c4 = !(false || !true && c2);
	
	d4:String = "batata\n";
	d5:String = d4;
	puts(d4);
	puts(d5);
	e:Bool = 2.0 < b;
	return 3;
}

def testCall(a:Int, b:Float, c:Bool):Void {
    d:Int = 3;
    e:Float = 333.3;
    f:Bool = false;
	var1:Int = getInt(a, b, c) + getInt(a, b, c);
	var2:Float = getFloat(3, 3.77, true);
	var3:Bool = !getBool(d, e, f);
	return;
}

def getInt(a:Int, b:Float, c:Bool):Int {
	return 1;
}

def getFloat(a:Int, b:Float, c:Bool):Float {
	return 1.2;
}

def getBool(a:Int, b:Float, c:Bool):Bool {
	return true;
}

def unaryOpe(a:Int):Void {
	var1:Int = 3;
	var2:Int = 9;
	#var3:Int = -var2;
	
	var4:Float = 3.0;
	var5:Float = 9.6;
	var6:Float = -var4;
	return;
}

def assign(a:Int, b:Float, c:Bool):Void {
	var1:Int = 3;
	var2:Int = a;
	
	var3:Float = 3.2;
	var4:Float = b;
	
	var5:Bool = true;
	var6:Bool = c;
	return;
}

def simpleInt(a:Int, b:Int):Void {
	c:Int = a + b;
	d:Int = a - b;
	e:Int = a * b;
	f:Int = a / b;
	g:Int = a % b;
	return;
}	

def simpleFloat(a:Float, b:Float):Void {
	c:Float = a + b;
	d:Float = a - b;
	e:Float = a * b;
	f:Float = a / b;
	return;
}

def second(a:Int, b:Float, c:Bool, d:String):Void {
   e:Int;
   f:Float;
   g:Bool;
   h:String;
   return;
}

def third(a:[Int], b:[[Float]], c:[[[Bool]]], d:[[[[String]]]]):Void {
	e:[Int];
	f:[[Float]];
	g:[[[Bool]]];
	h:[[[[String]]]];
	return;
}