decl puts(s:String):Int
decl printInt(i:Int):Void
decl printFloat(f:Float):Void
decl printBool(b:Bool):Void
decl printString(s:String):Void
decl new_int_array(size:Int):[Int]
decl new_int_matrix(size:Int, size2:Int):[[Int]]
decl new_float_array(size:Int):[Float]
decl new_bool_array(size:Int):[Bool]
decl new_string_array(size:Int):[String]

def main():Int { 
	n:Int = 10;
	while (n > 0) {
		callFib(n);
		n = n - 1;
	}	
	return 0;
}

def Fibonacci(n:Int):Int { 
	if (n<0){
		printString("Incorrect input");
		return -1;
	} else {
		if (n==0) {
			# First Fibonacci number is 0 
			return 0;
		} else {
			if (n==1) {
				# Second Fibonacci number is 1 
				return 1;
			} else {
				return Fibonacci(n-1)+Fibonacci(n-2) ;
			}
		}
	}
}

def Fibonacci2(n:Int):Int { 
	if (n<0){
		printString("Incorrect input");
		return -1;
	} else {
		if (n==0) {
			# First Fibonacci number is 0 
			return 0;
		} else {
			if (n==1) {
				# Second Fibonacci number is 1 
				return 1;
			} 
			return Fibonacci(n-1)+Fibonacci(n-2);
		}
	}
}

def callFib(n:Int):Void {
	printString("---");
	printInt(Fibonacci(n));
	printInt(Fibonacci2(n));
	printInt(fib(n));
	printInt(fibTwo(n));
	printString("---");
}

def fib(n:Int):Int {
	if (n <= 1) {
		return n; 
	} else {
		return fib(n-1) + fib(n-2); 
   }
} 

def fibTwo(n:Int):Int {
	if (n <= 1) {
		return n; 
	}
	return fib(n-1) + fib(n-2);
} 

def myTest(n:Int):Void {
	if (n > 0) {
		printInt(n);
		myTest(n-1);
	}
} 

def simple_return_var2(a:Int):Int {
	if (a == 1) {
		return a; 
	} 
	return 0; 

}
